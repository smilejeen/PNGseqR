BiocManager::install("clusterProfiler")
BiocManager::install("clusterProfiler",force = TRUE)
library(clusterProfiler)
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("AnnotationHub")
library(AnnotationHub)
BiocManager::install("clusterProfiler")
library(clusterProfiler)
library(rvcheck)
BiocManager::install("clusterProfiler")
BiocManager::install("clusterProfiler",force = TRUE)
library(clusterProfiler)
library(rvcheck)
install.packages("rvcheck")
install.packages("rvcheck")
library(rvcheck)
BiocManager::install("clusterProfiler",force = TRUE)
library(clusterProfiler)
install.packages("devtools")
library(devtools)
devtools::install("rvcheck")
library(clusterProfiler)
install.packages("C:/Users/windows/Downloads/rvcheck_0.2.0.tar.gz", repos = NULL, type = "source")
library(rvcheck)
library(clusterProfiler)
BiocManager::install("clusterProfiler")
BiocManager::install("clusterProfiler",force = TRUE)
library(AnnotationHub)
library(rvcheck)
library(clusterProfiler)
devtools::install_github('GuangchuangYu/clusterProfiler')
install.packages("C:/Users/windows/Downloads/clusterProfiler-master.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/windows/Downloads/clusterProfiler-master.zip", repos = NULL, type = "win.binary")
devtools::install_github('https://github.com/YuLab-SMU/clusterProfiler.git')
BiocManager::install("DOSE")
install.packages("C:/Users/windows/Downloads/DOSE_3.18.2.tar.gz", repos = NULL, type = "source")
library(DOSE)
devtools::install_github('https://github.com/YuLab-SMU/clusterProfiler.git')
BiocManager::install("enrichplot")
install.packages("C:/Users/windows/Downloads/enrichplot_1.12.2.tar.gz", repos = NULL, type = "source")
install.packages("scatterpie")
BiocManager::install("enrichplot",force = T)
library(enrichplot)
library(DOSE)
BiocManager::install("DOSE",force = T)
library(DOSE)
devtools::install_github('https://github.com/YuLab-SMU/clusterProfiler.git')
library(BiocManager)
BiocManager::install(version="3.12")
BiocManager::install(version="3.10")
library(BiocManager)
BiocManager::install("clusterProfiler")
BiocManager::install("clusterProfiler",force = T)
library(clusterProfiler)
devtools::install("rvcheck")
library(rvcheck)
library(clusterProfiler)
devtools::install_github('https://github.com/YuLab-SMU/clusterProfiler.git')
install.packages("C:/Users/windows/Downloads/DOSE_3.18.2.tar.gz", repos = NULL, type = "source")
library(DOSE)
devtools::install_github('https://github.com/YuLab-SMU/clusterProfiler.git')
install.packages("C:/Users/windows/Downloads/enrichplot_1.12.1.tar.gz", repos = NULL, type = "source")
install.packages("ggtree")
library(ggtree)
install.packages("C:/Users/windows/Downloads/ggtree_3.0.4.tar.gz", repos = NULL, type = "source")
BiocManager::install("ggtree",force = T)
BiocManager::install("scatterpie",force = T)
BiocManager::install("shadowtext",force = T)
install.packages("C:/Users/windows/Downloads/enrichplot_1.12.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/windows/Downloads/enrichplot_1.12.2.zip", repos = NULL, type = "win.binary")
remove(enrichplot)
remove.packages(enrichplot)
BiocManager::install("enrichplot",force = T)
install.packages("C:/Users/windows/Downloads/enrichplot_1.12.2.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/windows/Downloads/enrichplot_1.12.2.zip", repos = NULL, type = "win.binary")
devtools::install_github('https://github.com/YuLab-SMU/clusterProfiler.git')
remove.packages(grep("rvcheck",install.packages(),value = T))
remove.packages(grep("rvcheck",install.packages(),value = T))
.rs.restartR()
install.packages("C:/Users/windows/Downloads/rvcheck_0.2.0.tar.gz", repos = NULL, type = "source")
library(clusterProfiler)
devtools::install_github('https://github.com/YuLab-SMU/clusterProfiler.git')
remove.packages(grep("rvcheck",install.packages(),value = T))
.rs.restartR()
library(clusterProfiler)
devtools::install("rvcheck")
BiocManager::install("rvcheck")
BiocManager::install("rvcheck",force = T)
library(rvcheck)
library(clusterProfiler)
BiocManager::install("clusterProfiler",force = T)
library(clusterProfiler)
devtools::install_github('https://github.com/YuLab-SMU/clusterProfiler.git')
writeLines('PATH="C:/rtools40/usr/bin/;${PATH}"', con = "~/.Renviron")
.rs.restartR()
Sys.which("make")
install.packages("jsonlite", type = "source")
library(BiocManager)
install.packages("BiocManager")
install.packages("BiocManager")
library(BiocManager)
BiocManager::install(version = "3.12")
library(AnnotationHub)
BiocManager::install("clusterProfiler")
installed.packages()[, c(“Package”, “LibPath”)]
installed.packages()[, c("Package", "LibPath")]
Sys.chmod("C:/Program Files/R/R-4.0.5/library",'777')
BiocManager::install("clusterProfiler")
BiocManager::install("clusterProfiler")
BiocManager::install("clusterProfiler",force = TRUE)
library(clusterProfiler)
install.packages("grid")
install.packages("BiocManager")
install.packages("BiocManager",lib = "C:/Program Files/R/R-4.0.5/library")
install.packages("BiocManager")
BiocManager::install("AnnotationHub")
BiocManager::install("AnnotationHub")
BiocManager::install("AnnotationHub",force = TRUE)
BiocManager::install("AnnotationHub",force = TRUE)
library(AnnotationHub)
BiocManager::install("clusterProfiler")
library(clusterProfiler)
BiocManager::install("DOSE")
BiocManager::install("DOSE",force = TRUE)
library(DOSE)
devtools::install("rvcheck")
library(rvcheck)
?rvcheck()
BiocManager::install("rvcheck")
BiocManager::install("rvcheck",force = T)
library(clusterProfiler)
devtools::install("rvcheck")
install.packages("devtools")
devtools::install("rvcheck")
devtools::install_github('https://github.com/YuLab-SMU/clusterProfiler.git')
writeLines('PATH="D:/rtools40/usr/bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
writeLines('PATH="D:\\rtools40\\usr\\bin\\;${PATH}"', con = "~/.Renviron")
Sys.which("make")
writeLines('PATH="D:/rtools40/usr/bin/;${PATH}"', con = "~/.Renviron")
Sys.which("make")
getwd()
install.packages("rvcheck")
library(rvcheck)
library(BiocManager)
library(AnnotationHub)
library(clusterProfiler)
BiocManager::install("AnnotationHub")
library(AnnotationHub)
BiocManager::install("clusterProfiler")
library(clusterProfiler)
biocmanager:install()
BiocManager:install()
BiocManager::install()
BiocManager:install()
library(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github('GuangchuangYu/clusterProfiler')
library(clusterProfiler)
library(glue)
library(DOSE)
library(clusterProfiler)
BiocManager::install("DOSE")
library(DOSE)
BiocManager::install("DOSE",force = T)
library(DOSE)
library(clusterProfiler)
writeLines('PATH="C:\\rtools40\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
library(glue)
install.packages("glue")
install.packages("glue")
library(glue)
install.packages("devtools")
library(devtools)
BiocManager::install("DOSE")
BiocManager::install("DOSE",force = T)
library(DOSE)
install.packages("plyr")
library(plyr)
BiocManager::install("DOSE",force = T)
library(DOSE)
library(clusterProfiler)
library(org.Hs.eg.db)
BiocManager::install("org.Hs.eg.db",force = T)
library(org.Hs.eg.db)
x <- c("GPX3",  "GLRX",   "LBP",   "CRYAB", "DEFB1", "HCLS1",   "SOD2",   "HSPA2",
"ORM1",  "IGFBP1", "PTHLH", "GPC3",  "IGFBP3","TOB1",    "MITF",   "NDRG1",
"NR1H4", "FGFR3",  "PVR",   "IL6",   "PTPRM", "ERBB2",   "NID2",   "LAMB1",
"COMP",  "PLS3",   "MCAM",  "SPP1",  "LAMC1", "COL4A2",  "COL4A1", "MYOC",
"ANXA4", "TFPI2",  "CST6",  "SLPI",  "TIMP2", "CPM",     "GGT1",   "NNMT",
"MAL",   "EEF1A2", "HGD",   "TCN2",  "CDA",   "PCCA",    "CRYM",   "PDXK",
"STC1",  "WARS",  "HMOX1", "FXYD2", "RBP4",   "SLC6A12", "KDELR3", "ITM2B")
eg = bitr(x, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
head(eg)
ggo <- groupGO(gene     = gene.df$ENTREZID,
OrgDb    = org.Hs.eg.db,
ont      = "CC",
level    = 3,
readable = TRUE)
x <- c("GPX3",  "GLRX",   "LBP",   "CRYAB", "DEFB1", "HCLS1",   "SOD2",   "HSPA2",
"ORM1",  "IGFBP1", "PTHLH", "GPC3",  "IGFBP3","TOB1",    "MITF",   "NDRG1",
"NR1H4", "FGFR3",  "PVR",   "IL6",   "PTPRM", "ERBB2",   "NID2",   "LAMB1",
"COMP",  "PLS3",   "MCAM",  "SPP1",  "LAMC1", "COL4A2",  "COL4A1", "MYOC",
"ANXA4", "TFPI2",  "CST6",  "SLPI",  "TIMP2", "CPM",     "GGT1",   "NNMT",
"MAL",   "EEF1A2", "HGD",   "TCN2",  "CDA",   "PCCA",    "CRYM",   "PDXK",
"STC1",  "WARS",  "HMOX1", "FXYD2", "RBP4",   "SLC6A12", "KDELR3", "ITM2B")
eg = bitr(x, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
head(eg)
ids <- bitr(x, fromType="SYMBOL", toType=c("UNIPROT", "ENSEMBL"), OrgDb="org.Hs.eg.db")
head(ids)
data(geneList, package="DOSE")
gene <- names(geneList)[abs(geneList) > 2]
gene.df <- bitr(gene, fromType = "ENTREZID",
toType = c("ENSEMBL", "SYMBOL"),
OrgDb = org.Hs.eg.db)
head(gene.df)
ggo <- groupGO(gene     = gene.df$ENTREZID,
OrgDb    = org.Hs.eg.db,
ont      = "CC",
level    = 3,
readable = TRUE)
ggo
class(ggo)
getwd()
ego <- enrichGO(gene          = gene,
universe      = names(geneList),
OrgDb         = org.Hs.eg.db,
ont           = "CC",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable      = TRUE)
head(ego)
ego2 <- enrichGO(gene =gene.df$ENSEMBL,
OrgDb         = org.Hs.eg.db,
keytype       = "ENSEMBL",
ont           = "CC",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
gene.df
ego2 <- enrichGO(gene =gene.df,
OrgDb         = org.Hs.eg.db,
keytype       = "ENSEMBL",
ont           = "CC",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
ego2 <- enrichGO(gene =gene,
OrgDb         = org.Hs.eg.db,
keytype       = "ENSEMBL",
ont           = "CC",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
gene.df
gene
gene.df$ENSEMBL
dotplot
dotplot(ego,title="Enrichment GO CCdot")
barplot(ego, showCategory=20,title="EnrichmentGO CC")
plotGOgraph(ego)
BiocManager::install("topGO")
dotplot(ego,title="Enrichment GO CCdot")
#BiocManager::install("topGO")
library(biomaRt)
#BiocManager::install("topGO")
BiocManager::install("biomaRt")
library(biomaRt)
listMarts()
plant<-useMart("ensembl")
listDatasets(plant)
ensembl = useMart(biomart = "plants_mart",host = "http://plants.ensembl.org")
dataset <- listDatasets(mart = ensembl)
head(dataset)
listDatasets(dataset)
dataset
listEnsemblArchives()
ensembl54 <- useMart(host='apr2018.archive.ensembl.org',
biomart='plants_mart')
library("biomaRt")
listMarts()
source("http://bioconductor.org/biocLite.R")
biocLite(“biomaRt”)
#BiocManager::install("topGO")
BiocManager::install("biomaRt")
#BiocManager::install("topGO")
BiocManager::install("biomaRt",force = T)
library(biomaRt)
listMarts()
install.packages("biomartr",dependencies = T)
library(biomartr)
gene_list <- "Zm00001d027885"
biomart(genes = gene_list),
mart = "plants_mart",
dataset = "zmays_eg_gene",
attributes = c("description",
"external_gene_name", "external_gene_source"),
filters = "ensembl_gene_id")
biomart(genes = gene_list,mart = "plants_mart",dataset = "zmays_eg_gene",attributes = c("description","external_gene_name", "external_gene_source"),filters = "ensembl_gene_id")
listDatabases(db = "all")
library(biomartr)
biomart(genes = c("AT1G06090", "AT1G06100",
"AT1G06110", "AT1G06120",
"AT1G06130", "AT1G06200"),
mart = "plants_mart",
dataset = "athaliana_eg_gene",
attributes = c("start_position","end_position","description"),
filters = "ensembl_gene_id")
is.genome.available(db = "ensembl", Homo sapiens, details = FALSE)
is.genome.available(db = "ensembl", "Homo sapiens", details = FALSE)
getENSEMBLGENOMESInfo()
df <- getENSEMBLGENOMESInfo()
head(df)
getwd()
write.table(df,"df.txt",sep = "\t".quote=F,row.names = F)
write.table(df,"df.txt",sep = "\t",quote=F,row.names = F)
getENSEMBLInfo()
getMarts()
getDatasets(plants_mart)
getDatasets(Ensembl Plants Genes 51)
getDatasets("plants_mart")
df <- getDatasets("plants_mart")
write.table(df,"df.txt",sep = "\t",quote = F,row.names = F)
library(biomaRt)
listMarts()
listMarts(host = "https://nov2020-plants.ensembl.org/")
mart<-useMart(biomart = "plants_mart",host = "https://nov2020-plants.ensembl.org/")
datasets <- listDatasets(mart)
datasets
datasets$dataset
phyper(62-1, 1014, 25072, 797, lower.tail=F)
phyper(41-1, 1118, 24968, 797, lower.tail=F)
x<-matrix(c(62,952,735,24337),ncol=2,nrow=2)
y <- matrix(c(41,1077,756,24212),ncol=2,nrow=2)
fisher.test(x)
fisher.test(y)
chisq.test(x)
chisq.test(y)
library(biomaRt)
listMarts()
listMarts(host = "https://nov2020-plants.ensembl.org/")
mart<-useMart(biomart = "plants_mart",host = "https://nov2020-plants.ensembl.org/")
datasets <- listDatasets(mart)
datasets$dataset
library(biomaRt)
#listMarts()
#listMarts(host = "https://nov2020-plants.ensembl.org/")
mart<-useMart(biomart = "plants_mart",host = "https://nov2020-plants.ensembl.org/")
datasets <- listDatasets(mart)
datasets$dataset
mart <- useDataset("zmays_eg_gene", useMart(biomart = "plants_mart",host = "https://nov2020-plants.ensembl.org/"))
head(mart)
mart
attributes <- listAttributes(mart)
attributes
listFilters(mart)
a <- c("Zm00001d027880","Zm00001d027881","Zm00001d027882","Zm00001d027883","Zm00001d027884","Zm00001d027885")
a <- as.data.frame(c("Zm00001d027880","Zm00001d027881","Zm00001d027882","Zm00001d027883","Zm00001d027884","Zm00001d027885"))
head(a)
a <- c("Zm00001d027880","Zm00001d027881","Zm00001d027882","Zm00001d027883","Zm00001d027884","Zm00001d027885")
88+645
5203+178+961+1395
645+662
283+5+37+119
y1 <- c(733,7737)
y2 <- c(1307,7737)
t.test(y1,x1)
x1 <- c(54,444)
x2 <- c(106,444)
t.test(y1,x1)
t.test(y2,x2)
z1 <- c(88,7737)
z2 <- c(13,444)
t.test(z1,z2)
88/7737
13/444
k1 <- c(662,1395)
k2 <- c(65,119)
t.test(k1,k2)
662/1395
65/119
l2 <- c(34,150)
t.test(l1,l2)
l1 <- c(80,277)
l2 <- c(34,150)
t.test(l1,l2)
t.test(l1,l2,paired = T)
fisher.test(matrix(c(733,54,662,65),nrow=2))
fisher.test(matrix(c(733,7737,54,444),nrow=2))
fisher.test(matrix(c(1307,7737,106,444),nrow=2))
?mlv()
library(modeest)
library(EnhancedVolcano)
install.packages("ggplot2")
install.packages("ggplot2")
library(EnhancedVolcano)
install.packages("EnhancedVolcano")
BiocManager::install('EnhancedVolcano')
BiocManager::install('EnhancedVolcano',force = TRUE)
library(EnhancedVolcano)
BiocManager::install("ggrepel")
BiocManager::install("ggrepel",force = T)
library(EnhancedVolcano)
BiocManager::install("dplyr",force = T)
file <- read.delim("D:/projects/project_BSR_new_pipeline/mutseq/differential_expression_annotation.txt",header = T)
file <- read.delim("D:/projects/project_BSR_new_pipeline/mutseq/differential_expression_result.txt",header = T)
significant.level <- 0.05
expression.fold <- 1.5
plot_DEG <- function(file,significant.level,expression.fold){
file <- file[,1:7]
rownames(file)<-file$genes
file <- file[,2:7]
names(file) <- c('baseMean','log2FC','lfcSE','stat','pvalue','FDR')
keyvals <- rep('black', nrow(file))
names(keyvals) <- rep('None', nrow(file))
keyvals[which((file$log2FC > expression.fold)&(file$FDR<significant.level))] <- 'red3'
names(keyvals)[which((file$log2FC > expression.fold)&(file$FDR<significant.level))] <- 'up'
keyvals[which((file$log2FC < -expression.fold)&(file$FDR<significant.level))] <- 'powderblue'
names(keyvals)[which((file$log2FC < -expression.fold)&(file$FDR<significant.level))] <- 'down'
keyvals[which(((file$log2FC < expression.fold)&(file$log2FC > -expression.fold))&(file$FDR<significant.level))] <- 'azure3'
names(keyvals)[which(((file$log2FC < expression.fold)&(file$log2FC > -expression.fold))&(file$FDR<significant.level))] <- 'FDR'
keyvals[which(((file$log2FC > expression.fold)|(file$log2FC < -expression.fold))&(file$FDR>significant.level))] <- 'gray65'
names(keyvals)[which(((file$log2FC > expression.fold)|(file$log2FC < -expression.fold))&(file$FDR>significant.level))] <- 'Log(base2)foldchange'
max.num <- max(file$log2FC,na.rm=TRUE)
min.num <- min(file$log2FC,na.rm=TRUE)
p <- EnhancedVolcano(file,lab = rownames(file),x = 'log2FC',y = 'FDR',xlim = c(min.num, max.num),endsConnectors = "both",pCutoff = significant.level,FCcutoff = expression.fold,pointSize = 2.0,labSize = 3.5,colAlpha = 1,arrowheads = FALSE,legendPosition = 'right',xlab = bquote(~log[2]~'fold change'),title = NULL,ylab=bquote(~-log[10]~'FDR'),drawConnectors = TRUE,widthConnectors = 0.8,legendLabSize = 15,legendIconSize = 5.0,subtitle = NULL,colConnectors = 'black',gridlines.major = FALSE,gridlines.minor = FALSE,boxedLabels=FALSE,typeConnectors = "open",legendLabels = c("NS","log2FC","FDR","log2FC&FDR"),col = c("grey10", "forestgreen", "navyblue", "red3"))
return(p)
}
plot_DEG(file,significant.level,expression.fold)
library(EnhancedVolcano)
BiocManager::install('EnhancedVolcano')
BiocManager::install('EnhancedVolcano',force = TRUE)
library(EnhancedVolcano)
BiocManager::install('EnhancedVolcano',force = TRUE)
library(EnhancedVolcano)
library(ggplot2)
file <- read.delim("D:/projects/project_BSR_new_pipeline/mutseq/differential_expression_result.txt",header = T)
significant.level <- 0.05
expression.fold <- 1.5
plot_DEG <- function(file,significant.level,expression.fold){
file<-subset(file,log2FoldChange!="NA") #删除log2FoldChange中的空值
file<-subset(file,padj!="NA") #删除pvalue中的空值
#对log2foldchange进行上调下调的判断
threshold <- as.factor(ifelse(file$padj < significant.level & abs(file$log2FoldChange) >= expression.fold ,ifelse(file$log2FoldChange >= expression.fold ,'Up','Down'),'Not'))
p <- ggplot(file,aes(x=log2FoldChange,y=-log10(padj),colour=threshold)) + xlab("log2(Fold Change)")+ylab("-log10(qvalue)") + geom_point(size = 2,alpha=1) + ylim(0,20) + xlim(min(file$log2FoldChange,na.rm=TRUE),max(file$log2FoldChange,na.rm=TRUE)) + scale_color_manual(values=c("blue","grey", "red"))+ geom_vline(xintercept = c(-expression.fold, expression.fold), lty = 2,colour="#000000")+geom_hline(yintercept = c(1), lty = 2,colour="#000000")+
theme(
axis.text=element_text(size=20),
axis.title=element_text(size=20)
)
return(p)
}
plot_DEG(file,significant.level,expression.fold)
16730676-16722714
(67391582-46242129)/46242129
67391582/46242129
67391582/46242129*54
67215293/52218942*54
329484123/17762201
329484123/17762203
329484123/177622013
329484123/177622013*54
128932753/36989694
128932753/36989694*54
45376763/20285531
45376763/20285531*54
16722714-150000
16730676+150000
120000000/1400000000
120000000/1400000000*500
680000/1400000000*500
120000000/40
7000000/1400000000*500
7000000/3
98000000/1400000000*500
22000000/1400000000*500
20000000/1400000000*500
31000000/1400000000*500
11000000/1400000000*500
3360000/1400000000*500
25000000/1400000000*500
55000000/1400000000*500
40000000/1400000000*500
67000000/1400000000*500
75000000/1400000000*500
45*0.7
65*0.7
library(devtools)
require(devtools)
install.packages(devtools)
install.packages("devtools")
library(devtools)
writeLines('PATH="D:\\rtools40\\usr\\bin;${PATH}"', con = "~/.Renviron")
library(devtools)
library(rtracklayer)
setwd("D:/projects/project_BSR_new_pipeline/mutseq/example")
gtf_data.example <- import("zma.v4.example.gtf")
setwd("D:/projects/project_BSR_new_pipeline/PNGseqR")
load_all()
usethis::use_data(gtf_data.example)
document()
#use_vignette("vignette")
check()
vcff_data.example <- vcfR::read.vcfR("D:/projects/project_BSR_new_pipeline/mutseq/example/snp.vcf")
vcf_data.example <- vcfR::read.vcfR("D:/projects/project_BSR_new_pipeline/mutseq/example/snp.vcf")
usethis::use_data(vcf_data.example)
usethis::use_data(vcf_data.example,overwrite = TRUE)
document()
check()
