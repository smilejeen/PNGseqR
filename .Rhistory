}
for(k in chroms){
x0.zc <- mht.data[mht.data[,1]==k,2]
y0.zc <- mht.data[mht.data[,1]==k,14]
points(x0.zc,y0.zc,col=color.array[which(chroms==k)],pch=20,cex=1)
}
axis(side = 1,at=pos.chr,labels=chroms,cex.axis=2,family="serif",font=2)
par(family="serif",font.lab=2,font.axis=2)
dev.off()
cat("Gprime method line Chart finished \n")
if (!is.null(chromlist)){
cat("Plotting Gprime method line Chart of selected chromosomes \n")
for (i in chromlist) {
png(paste0(file.name," Chromosome ",i,".smooth.png"),height=500,width=430) # 命名
test <- file[file$CHROM==i,]
x0 <- test$POS/1000000
y0 <- test$tricubeG
plot(x0,y0,type="l",cex=1.5,cex.axis=1.5,cex.lab=1.5,lwd = 4.5,xlab="Genomic Position",ylab="Tricube smooth of G-value",xlim=c(0,x0[length(x0)]),
ylim=c(0,max(y0)+1),xaxs="i",yaxs="i",font=2)
title(main = paste0("chromosome ",i),cex.main=2)
if (!is.null(threshold)){
threshold.value <- sort(as.numeric(file$tricubeG))[1+(length(file$tricubeG)-1)*threshold]
sig.result <- file[file$tricubeG>=threshold.value,]
h.v <- sig.result[which.min(sig.result$tricubeG),14]
abline(h=h.v,lwd=3.5,col="red")
}
if (!is.null(pval)){
p.result <- file[file$pvalue<=pval,]
p.v <- p.result[which.min(p.result$tricubeG),14]
abline(h=p.v,lwd=3.5,col="blue")
}
dev.off()
}
cat("Gprime method line Chart of selected chromosomes finished \n")
}
} else if (type == "DeltaSNP"){
cat("Plotting deltaSNP method Scatter diagram \n")
png(paste0(file.name,".point.png"),height=480,width=1080) # 命名
y <- mht.data[,15]
x <- mht.data[,2]
y.max <- max(y,na.rm=TRUE)
color.array <- rep(c("blue4","green4"), len = length(chroms))
plot(x,y,type="p",cex=1,cex.axis=2,cex.lab=1.5,xlab="Chromosomes region",ylab="deltaSNP",xlim=c(0,pos[length(pos)]),
ylim=c(0,y.max),xaxs="i",yaxs="i",xaxt="n",font=2)
for(k in chroms){
x.zc <- mht.data[mht.data[,1]==k,2]
y.zc <- mht.data[mht.data[,1]==k,15]
points(x.zc,y.zc,col=color.array[which(chroms==k)],pch=20,cex=1)
}
axis(side = 1,at=pos.chr,labels=chroms,cex.axis=2,family="serif",font=2)
par(family="serif",font.lab=2,font.axis=2)
dev.off()
cat("deltaSNP method Scatter diagram finished \n")
png(paste0(file.name,".smooth.png"),height=480,width=1080) # 命名
y0 <- mht.data[,16]
x0 <- mht.data[,2]
y0.max <- max(y0,na.rm=TRUE)
color.array <- rep(c("black"), len = length(chroms))
cat("Plotting deltaSNP method line Chart \n")
plot(x0,y0,type="l",cex=1,cex.axis=2,cex.lab=1.5,xlab="Chromosomes region",ylab="Tricube smooth of deltaSNP",xlim=c(0,pos[length(pos)]),
ylim=c(0,y0.max),xaxs="i",yaxs="i",xaxt="n",font=2)
if (!is.null(threshold)){
threshold.value <- sort(as.numeric(file$tricubeDS))[1+(length(file$tricubeDS)-1)*threshold]
sig.result <- file[file$tricubeDS>=threshold.value,]
h.v <- sig.result[which.min(sig.result$tricubeDS),16]
abline(h=h.v,lwd=3.5,col="red")
}
if (!is.null(pval)){
p.result <- file[file$pvalue<=pval,]
p.v <- p.result[which.min(p.result$tricubeDS),16]
abline(h=p.v,lwd=3.5,col="blue")
}
for(k in chroms){
x0.zc <- mht.data[mht.data[,1]==k,2]
y0.zc <- mht.data[mht.data[,1]==k,16]
points(x0.zc,y0.zc,col=color.array[which(chroms==k)],pch=20,cex=1)
}
axis(side = 1,at=pos.chr,labels=chroms,cex.axis=2,family="serif",font=2)
par(family="serif",font.lab=2,font.axis=2)
dev.off()
cat("DeltaSNP method line Chart finished \n")
if (!is.null(chromlist)){
cat("Plotting DeltaSNP method line Chart of selected chromosomes \n")
for (i in chromlist) {
png(paste0(file.name," Chromosome ",i,".smooth.png"),height=500,width=430) # 命名
test <- file[file$CHROM==i,]
x0 <- test$POS/1000000
y0 <- test$tricubeDS
plot(x0,y0,type="l",cex=1.5,cex.axis=1.5,cex.lab=1.5,lwd = 4.5,xlab="Genomic Position",ylab="Tricube smooth of deltaSNP",xlim=c(0,x0[length(x0)]),
ylim=c(0,max(y0)+1),xaxs="i",yaxs="i",font=2)
title(main = paste0("chromosome ",i),cex.main=2)
if (!is.null(threshold)){
threshold.value <- sort(as.numeric(file$tricubeDS))[1+(length(file$tricubeDS)-1)*threshold]
sig.result <- file[file$tricubeDS>=threshold.value,]
h.v <- sig.result[which.min(sig.result$tricubeDS),14]
abline(h=h.v,lwd=3.5,col="red")
}
if (!is.null(pval)){
p.result <- file[file$pvalue<=pval,]
p.v <- p.result[which.min(p.result$tricubeDS),14]
abline(h=p.v,lwd=3.5,col="blue")
}
dev.off()
}
cat("DeltaSNP method line Chart of selected chromosomes finished \n")
}
}
}else{
message("Error! Our calculate STOP! Please check your parameter type whether exactly right?")
}
}else{
message("Error! Our calculate STOP! Please check your parameter file.name whether exactly right?")
}
}else{
message("Error! Our calculate STOP! Please check your import file whether exist?")
}
}
##G-test
plot_BSA(file = df_G$total.result,
chromlist = seqname,
type = "Gprime",
file.name = "Gprime",
threshold = 0.995,
pval = 0.001)
GO_analysis <- function(GO_term,
DEG_id,
type=c("BP","MF","CC","all"),
algorithm=c("classic","weight01","elim"),
statistic=c("fisher","ks"),
top_num,
plot = TRUE){
cat("Let's begin \n")
cat("So the number of differential expression gene is ",length(DEG_id),"\n")
names(GO_term) <- c("id","GO_terms")
go_split <- split(GO_term$GO_terms, GO_term$id)
cat("So the number of Species gene is ",length(go_split),"\n")
re <- NULL
id <- names(go_split)
cat("Building gene2go mapping,please waiting!","\n")
for (i in 1:length(go_split)) {
term <- paste(go_split[[i]],collapse=",")
re <- rbind(re,term)
}
cat("Finish bulding gene2go mapping!","\n")
result <- cbind(id,re)
write.table(result,"gene2go.map",sep = "\t",quote = F,row.names = F,col.names = F)
gene2go <- topGO::readMappings(file = "gene2go.map")
cat("Prepare GO matrix","\n")
genenames <- names(gene2go)
genelist <- factor(as.integer(genenames %in% DEG_id))
# A factor will be generated here, with two levels: 0 and 1, where 1 represents the gene of interest.
names(genelist) <- genenames
if(type!="all"){
GOdata <- new("topGOdata", ontology=type, allGenes = genelist,annot = annFUN.gene2GO, gene2GO = gene2go)
cat("GO analysing!","\n")
node <-  topGO::runTest(GOdata, algorithm = algorithm, statistic = statistic)
if(statistic=="ks"){
table <- topGO::GenTable(GOdata,KS = node,ranksOf = algorithm,topNodes = attributes(node)$geneData[4])
}else{
table <- topGO::GenTable(GOdata,Fis = node,ranksOf = algorithm,topNodes = attributes(node)$geneData[4])
}
Gene.ratio <- table$Significant/table$Annotated
Category <- rep(i,dim(table)[1])
result <- cbind(table,Gene.ratio,Category)
result <- result[which((result$Gene.ratio)>0),]
result <- result[1:top_num,]
names(result) <- c("GO.ID","Term","Annotated","Significant","Expected","Pvalue","Gene.ratio","Category")
result$Pvalue <- as.numeric(result$Pvalue)
if (plot){
cat("Plotting Directed acyclic graph \n")
pdf(paste0(type,"_DAG.pdf"),width = 8,height = 6.5)
topGO::showSigOfNodes(GOdata, score(node), firstSigNodes = 5, useInfo = "all")
dev.off()
cat("Plotting Bubble graph \n")
pdf(paste0(type,"_bubble.pdf"),height=6,width=8)
print(ggplot2::ggplot(result,ggplot2::aes(Gene.ratio,Term))+ggplot2::geom_point(ggplot2::aes(size = Significant,color = Pvalue))+
ggplot2::scale_color_gradient(low = "blue",high = "red")+ggplot2::theme_bw()+
ggplot2::labs(color=expression(-log[10](Pvalue)),size="Count",x="Gene Ratio",y="GO Terms"))
dev.off()
cat("Plotting histogram \n")
pdf(paste0(type,"_histogram.pdf"),height=6,width=8)
print(ggplot2::ggplot(result,aes(y=Significant,x=Term,fill=Category)) + ggplot2::geom_bar(stat="identity",position = "dodge") + ggplot2::facet_grid(Category~.,scales = "free",space = "free") + ggplot2::coord_flip() + ggplot2::theme_bw()+ ggplot2::labs(x="Terms",y="Significant Count"))
dev.off()
}
cat("Finish! \n")
return(result)
}else{
type <- c("BP","MF","CC")
result <- data.frame()
for (i in type) {
GOdata <- new("topGOdata", ontology=i, allGenes = genelist,annot = annFUN.gene2GO, gene2GO = gene2go)
cat("GO analysing for ",i," !","\n")
node <-  topGO::runTest(GOdata, algorithm = algorithm, statistic = statistic)
if(statistic=="ks"){
table <- topGO::GenTable(GOdata,KS = node,ranksOf = algorithm,topNodes = attributes(node)$geneData[4])
}else{
table <- topGO::GenTable(GOdata,Fis = node,ranksOf = algorithm,topNodes = attributes(node)$geneData[4])
}
Gene.ratio <- table$Significant/table$Annotated
Category <- rep(i,dim(table)[1])
table <- cbind(table,Gene.ratio,Category)
table <- table[which((table$Gene.ratio)>0),]
table <- table[1:top_num,]
result <- rbind(result,table)
cat(i,"analysis finish! \n")
if (plot){
cat("Plotting",i," Directed acyclic graph \n")
pdf(paste0(i,"_DAG.pdf"),width = 8,height = 6.5)
topGO::showSigOfNodes(GOdata, score(node), firstSigNodes = 5, useInfo = "all")
dev.off()
}
}
names(result) <- c("GO.ID","Term","Annotated","Significant","Expected","Pvalue","Gene.ratio","Category")
result$Pvalue <- as.numeric(result$Pvalue)
if (plot){
cat("Plotting Bubble graph \n")
pdf("all_bubble.pdf",height=6,width=8)
print(ggplot2::ggplot(result,ggplot2::aes(Gene.ratio,Term))+ggplot2::geom_point(ggplot2::aes(size = Significant,color = Pvalue))+
ggplot2::scale_color_gradient(low = "blue",high = "red")+ggplot2::theme_bw()+
ggplot2::labs(color=expression(-log[10](Pvalue)),size="Count",x="Gene Ratio",y="GO Terms"))
dev.off()
cat("Plotting histogram \n")
pdf("all_histogram.pdf",height=6,width=8)
print(ggplot2::ggplot(result,ggplot2::aes(y=Significant,x=Term,fill=Category)) + ggplot2::geom_bar(stat="identity",position = "dodge") + ggplot2::facet_grid(Category~.,scales = "free",space = "free") + ggplot2::coord_flip() + ggplot2::theme_bw() + ggplot2::labs(x="Terms",y="Significant Count"))
dev.off()
}
cat("Finish! \n")
return(result)
}
}
library(PNGseqR)
DEG_reads <- DEG_reads.example
rep <- 2
pvalue <- 0.05
log2fold <- 1.5
res <- DEG_analysis(file = DEG_reads,
rep.num = rep,
sig.level = pvalue,
exp.fold = log2fold,
file.name = "test",
plot = T)
sigDEG <- res$DEG_sig
geneid <- sigDEG$id
go_term <- GO_Term.example
mode <- "all"
algorithm <- "classic"
statistic <- "fisher"
num <- 20
GO_result <- GO_analysis(GO_term = go_term,
DEG_id = geneid,
type = mode,
algorithm = algorithm,
statistic = statistic,
top_num = num,
plot = TRUE)
GO_analysis <- function(GO_term,
DEG_id,
type=c("BP","MF","CC","all"),
algorithm=c("classic","weight01","elim"),
statistic=c("fisher","ks"),
top_num,
plot = TRUE){
cat("Let's begin \n")
cat("So the number of differential expression gene is ",length(DEG_id),"\n")
names(GO_term) <- c("id","GO_terms")
go_split <- split(GO_term$GO_terms, GO_term$id)
cat("So the number of Species gene is ",length(go_split),"\n")
re <- NULL
id <- names(go_split)
cat("Building gene2go mapping,please waiting!","\n")
for (i in 1:length(go_split)) {
term <- paste(go_split[[i]],collapse=",")
re <- rbind(re,term)
}
cat("Finish bulding gene2go mapping!","\n")
result <- cbind(id,re)
write.table(result,"gene2go.map",sep = "\t",quote = F,row.names = F,col.names = F)
gene2go <- topGO::readMappings(file = "gene2go.map")
cat("Prepare GO matrix","\n")
genenames <- names(gene2go)
genelist <- factor(as.integer(genenames %in% DEG_id))
# A factor will be generated here, with two levels: 0 and 1, where 1 represents the gene of interest.
names(genelist) <- genenames
if(type!="all"){
GOdata <- new("topGOdata", ontology=type, allGenes = genelist,annot = topGO::annFUN.gene2GO, gene2GO = gene2go)
cat("GO analysing!","\n")
node <-  topGO::runTest(GOdata, algorithm = algorithm, statistic = statistic)
if(statistic=="ks"){
table <- topGO::GenTable(GOdata,KS = node,ranksOf = algorithm,topNodes = attributes(node)$geneData[4])
}else{
table <- topGO::GenTable(GOdata,Fis = node,ranksOf = algorithm,topNodes = attributes(node)$geneData[4])
}
Gene.ratio <- table$Significant/table$Annotated
Category <- rep(i,dim(table)[1])
result <- cbind(table,Gene.ratio,Category)
result <- result[which((result$Gene.ratio)>0),]
result <- result[1:top_num,]
names(result) <- c("GO.ID","Term","Annotated","Significant","Expected","Pvalue","Gene.ratio","Category")
result$Pvalue <- as.numeric(result$Pvalue)
if (plot){
cat("Plotting Directed acyclic graph \n")
pdf(paste0(type,"_DAG.pdf"),width = 8,height = 6.5)
topGO::showSigOfNodes(GOdata, score(node), firstSigNodes = 5, useInfo = "all")
dev.off()
cat("Plotting Bubble graph \n")
pdf(paste0(type,"_bubble.pdf"),height=6,width=8)
print(ggplot2::ggplot(result,ggplot2::aes(Gene.ratio,Term))+ggplot2::geom_point(ggplot2::aes(size = Significant,color = Pvalue))+
ggplot2::scale_color_gradient(low = "blue",high = "red")+ggplot2::theme_bw()+
ggplot2::labs(color=expression(-log[10](Pvalue)),size="Count",x="Gene Ratio",y="GO Terms"))
dev.off()
cat("Plotting histogram \n")
pdf(paste0(type,"_histogram.pdf"),height=6,width=8)
print(ggplot2::ggplot(result,ggplot2::aes(y=Significant,x=Term,fill=Category)) + ggplot2::geom_bar(stat="identity",position = "dodge") + ggplot2::facet_grid(Category~.,scales = "free",space = "free") + ggplot2::coord_flip() + ggplot2::theme_bw()+ ggplot2::labs(x="Terms",y="Significant Count"))
dev.off()
}
cat("Finish! \n")
return(result)
}else{
type <- c("BP","MF","CC")
result <- data.frame()
for (i in type) {
GOdata <- new("topGOdata", ontology=i, allGenes = genelist,annot = topGO::annFUN.gene2GO, gene2GO = gene2go)
cat("GO analysing for ",i," !","\n")
node <-  topGO::runTest(GOdata, algorithm = algorithm, statistic = statistic)
if(statistic=="ks"){
table <- topGO::GenTable(GOdata,KS = node,ranksOf = algorithm,topNodes = attributes(node)$geneData[4])
}else{
table <- topGO::GenTable(GOdata,Fis = node,ranksOf = algorithm,topNodes = attributes(node)$geneData[4])
}
Gene.ratio <- table$Significant/table$Annotated
Category <- rep(i,dim(table)[1])
table <- cbind(table,Gene.ratio,Category)
table <- table[which((table$Gene.ratio)>0),]
table <- table[1:top_num,]
result <- rbind(result,table)
cat(i,"analysis finish! \n")
if (plot){
cat("Plotting",i," Directed acyclic graph \n")
pdf(paste0(i,"_DAG.pdf"),width = 8,height = 6.5)
topGO::showSigOfNodes(GOdata, score(node), firstSigNodes = 5, useInfo = "all")
dev.off()
}
}
names(result) <- c("GO.ID","Term","Annotated","Significant","Expected","Pvalue","Gene.ratio","Category")
result$Pvalue <- as.numeric(result$Pvalue)
if (plot){
cat("Plotting Bubble graph \n")
pdf("all_bubble.pdf",height=6,width=8)
print(ggplot2::ggplot(result,ggplot2::aes(Gene.ratio,Term))+ggplot2::geom_point(ggplot2::aes(size = Significant,color = Pvalue))+
ggplot2::scale_color_gradient(low = "blue",high = "red")+ggplot2::theme_bw()+
ggplot2::labs(color=expression(-log[10](Pvalue)),size="Count",x="Gene Ratio",y="GO Terms"))
dev.off()
cat("Plotting histogram \n")
pdf("all_histogram.pdf",height=6,width=8)
print(ggplot2::ggplot(result,ggplot2::aes(y=Significant,x=Term,fill=Category)) + ggplot2::geom_bar(stat="identity",position = "dodge") + ggplot2::facet_grid(Category~.,scales = "free",space = "free") + ggplot2::coord_flip() + ggplot2::theme_bw() + ggplot2::labs(x="Terms",y="Significant Count"))
dev.off()
}
cat("Finish! \n")
return(result)
}
}
sigDEG <- res$DEG_sig
geneid <- sigDEG$id
go_term <- GO_Term.example
mode <- "all"
algorithm <- "classic"
statistic <- "fisher"
num <- 20
GO_result <- GO_analysis(GO_term = go_term,
DEG_id = geneid,
type = mode,
algorithm = algorithm,
statistic = statistic,
top_num = num,
plot = TRUE)
sigDEG <- res$DEG_sig
geneid <- sigDEG$id
go_term <- GO_Term.example
mode <- "all"
algorithm <- "classic"
statistic <- "fisher"
num <- 20
GO_result <- GO_analysis(GO_term = go_term,
DEG_id = geneid,
type = mode,
algorithm = algorithm,
statistic = statistic,
top_num = num,
plot = TRUE)
getwd()
GO_result <- GO_analysis(GO_term = go_term,
DEG_id = geneid,
type = "BP",
algorithm = algorithm,
statistic = statistic,
top_num = num,
plot = TRUE)
class(type)
class(mode)
GO_term = go_term
DEG_id = geneid
type = "BP"
algorithm = algorithm
statistic = statistic
top_num = num
cat("Let's begin \n")
cat("So the number of differential expression gene is ",length(DEG_id),"\n")
names(GO_term) <- c("id","GO_terms")
go_split <- split(GO_term$GO_terms, GO_term$id)
cat("So the number of Species gene is ",length(go_split),"\n")
re <- NULL
id <- names(go_split)
cat("Building gene2go mapping,please waiting!","\n")
for (i in 1:length(go_split)) {
term <- paste(go_split[[i]],collapse=",")
re <- rbind(re,term)
}
cat("Finish bulding gene2go mapping!","\n")
result <- cbind(id,re)
write.table(result,"gene2go.map",sep = "\t",quote = F,row.names = F,col.names = F)
gene2go <- topGO::readMappings(file = "gene2go.map")
cat("Prepare GO matrix","\n")
genenames <- names(gene2go)
genelist <- factor(as.integer(genenames %in% DEG_id))
# A factor will be generated here, with two levels: 0 and 1, where 1 represents the gene of interest.
names(genelist) <- genenames
if(type!="all")
{
GOdata <- new("topGOdata", ontology=type, allGenes = genelist,annot = topGO::annFUN.gene2GO, gene2GO = gene2go)
}
type
GOdata <- new("topGOdata", ontology=type, allGenes = genelist,annot = topGO::annFUN.gene2GO, gene2GO = gene2go)
GOdata <- new("topGOdata", ontology="BP", allGenes = genelist,annot = topGO::annFUN.gene2GO, gene2GO = gene2go)
library(topGO)
GOdata <- new("topGOdata", ontology="BP", allGenes = genelist,annot = topGO::annFUN.gene2GO, gene2GO = gene2go)
install.packages("D:/projects/project_BSR_new_pipeline/PNGseqR_0.0.0.9.tar.gz", repos = NULL, type = "source")
#Differential expression analysis
DEG_reads <- DEG_reads.example
rep <- 2
pvalue <- 0.05
log2fold <- 1.5
res <- DEG_analysis(file = DEG_reads,
rep.num = rep,
sig.level = pvalue,
exp.fold = log2fold,
file.name = "test",
plot = F)
#load the package
library("PNGseqR")
res <- DEG_analysis(file = DEG_reads,
rep.num = rep,
sig.level = pvalue,
exp.fold = log2fold,
file.name = "test",
plot = F)
#Differential expression analysis
DEG_reads <- DEG_reads.example
res <- DEG_analysis(file = DEG_reads,
rep.num = rep,
sig.level = pvalue,
exp.fold = log2fold,
file.name = "test",
plot = F)
#GO analysis
sigDEG <- res$DEG_sig
geneid <- sigDEG$id
go_term <- GO_Term.example
#mode <- "all"
mode <- "BP"
algorithm <- "classic"
statistic <- "fisher"
num <- 20
GO_result <- GO_analysis(GO_term = go_term,
DEG_id = geneid,
type = mode,
algorithm = algorithm,
statistic = statistic,
top_num = num,
plot = F)
sigDEG <- res$DEG_sig
geneid <- sigDEG$id
go_term <- GO_Term.example
mode <- "all"
algorithm <- "classic"
statistic <- "fisher"
num <- 20
GO_result <- GO_analysis(GO_term = go_term,
DEG_id = geneid,
type = mode,
algorithm = algorithm,
statistic = statistic,
top_num = num,
plot = T)
#result annotation
gtf <- "zma.v4.example.gtf"
chr <- 8
start <- 79943
end <- 3418075
sigDEG <- res$DEG_sig
BSA_position <- data.frame(chr,start,end)
BSA_gene <- result_anno(BSA_data = BSA_position,
gtf_data = gtf,
DEG_data = sigDEG)
setwd("D:/projects/project_BSR_new_pipeline/PNGseqR")
#result annotation
gtf <- "zma.v4.example.gtf"
BSA_gene <- result_anno(BSA_data = BSA_position,
gtf_data = gtf,
DEG_data = sigDEG)
BSA_gene$genes_in_region
BSA_gene$DEGgenes_in_region
head(GO_result)
